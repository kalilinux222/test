@model ProductDetailsModel

@using Nop.Core
@using Nop.Core.Domain.Seo;
@using Nop.Core.Infrastructure;
@using Nop.Services.Configuration
@using Nop.Services.Localization;
@using Nop.Web.Models.Catalog;
@using SevenSpikes.Nop.Framework.Theme;
@using SevenSpikes.Nop.Plugins.ColorConfigurator.Infrastructure.Constants;

@{
    Layout = "~/Views/Shared/_ColumnsOne.cshtml";

    var currentTheme = ThemeHelper.GetPluginTheme(Plugin.FolderName);

    var storeContext = EngineContext.Current.Resolve<IStoreContext>();
    var settingService = EngineContext.Current.Resolve<ISettingService>();

    int numberOfPictureThumbnailsInCarousel = settingService.GetSettingByKey("CloudZoomSettings.NumberOfPictureThumbnailsInCarousel-" + currentTheme, 4, storeContext.CurrentStore.Id, true);

    string responsiveBreakpointsForThumbnails = settingService.GetSettingByKey("CloudZoomSettings.ResponsiveBreakpointsForThumbnailsCarousel-" + currentTheme, "", storeContext.CurrentStore.Id, true);

    if(string.IsNullOrWhiteSpace(responsiveBreakpointsForThumbnails))
    {
        responsiveBreakpointsForThumbnails = settingService.GetSettingByKey("CloudZoomSettings.DefaultResponsiveBreakpointsForThumbnailsCarousel", "", storeContext.CurrentStore.Id, true);
    }

    //title, meta
    Html.AddTitleParts(!String.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);

    var seoSettings = EngineContext.Current.Resolve<SeoSettings>();
    var showShareButton = EngineContext.Current.Resolve<Nop.Core.Domain.Catalog.CatalogSettings>().ShowShareButton;

    //canonical URL
    if (seoSettings.CanonicalUrlsEnabled)
    {
        var productUrl = Url.RouteUrl("Product", new { SeName = Model.SeName }, this.Request.Url.Scheme);
        Html.AddCanonicalUrlParts(productUrl);
    }

    //open graph META tags
    if (seoSettings.OpenGraphMetaTags)
    {
        var storeName = EngineContext.Current.Resolve<IStoreContext>().CurrentStore.GetLocalized(x => x.Name);
        Html.AddHeadCustomParts("<meta property=\"og:type\" content=\"product\" />");
        Html.AddHeadCustomParts("<meta property=\"og:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:description\" content=\"" + Html.Encode(Model.MetaDescription) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:url\" content=\"" + Request.Url.AbsoluteUri + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:site_name\" content=\"" + Html.Encode(storeName) + "\" />");
    }

    //Twitter META tags
    if (seoSettings.TwitterMetaTags)
    {
        var storeName = EngineContext.Current.Resolve<IStoreContext>().CurrentStore.GetLocalized(x => x.Name);
        Html.AddHeadCustomParts("<meta property=\"twitter:card\" content=\"summary\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:site\" content=\"" + Html.Encode(storeName) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:description\" content=\"" + Html.Encode(Model.MetaDescription) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:url\" content=\"" + Request.Url.AbsoluteUri + "\" />");
    }
    
    Html.AddCssFileParts("~/Plugins/SevenSpikes.Nop.Plugins.CloudZoom/Themes/" + currentTheme + "/Content/slick/slick-slider-1.6.0.css");

    Html.AddScriptParts("~/Plugins/SevenSpikes.Nop.Plugins.CloudZoom/Themes/" + currentTheme + "/Content/scripts/slick-slider-1.6.0.min.js");

    // add css and javascript file for carousel of the thumbnails
    Html.AddCssFileParts("~/Plugins/SevenSpikes.Nop.Plugins.CloudZoom/Themes/" + currentTheme + "/Content/carousel/carousel.css");
}
<!--product breadcrumb-->
@section Breadcrumb
{
    @Html.Partial("_ProductBreadcrumb", Model.Breadcrumb)
}
@Html.Widget("productdetails_after_breadcrumb", Model.Id)
<div class="page product-details-page">
    <div class="page-body">
        @Html.Widget("productdetails_top", Model.Id)
        @using (Html.BeginRouteForm("Product", new { SeName = Model.SeName }, FormMethod.Post, new { id = "product-details-form", @class = "has-color-configuration" }))
        {
            <div itemscope itemtype="http://schema.org/Product" data-productid="@Model.Id">
                <div class="product-details-wrapper">
                    <div class="product-essential">
                        @Html.Widget("productdetails_before_pictures", Model.Id)

                        @Html.Partial("_ProductDetailsPictures", Model)

                        @Html.Widget("productdetails_after_pictures", Model.Id)
                        <div class="overview">
                            @Html.Partial("_Discontinued", Model)
                            <div class="product-name">
                                <h1 itemprop="name">
                                    @Model.Name
                                </h1>
                            </div>
                            @Html.Widget("productdetails_overview_top", Model.Id)
                            <!--product reviews-->
                            @Html.Partial("_ProductReviewOverview", Model.ProductReviewOverview)
                            <!--SKU, MAN, GTIN, vendor-->
                            @Html.Partial("_SKU_Man_GTIN_Ven", Model)
                            <!--manufacturers-->
                            @Html.Partial("_ProductManufacturers", Model.ProductManufacturers)
                            <!--delivery-->
                            @Html.Partial("_DeliveryInfo", Model)

                            @if (!String.IsNullOrEmpty(Model.ShortDescription))
                            {
                                <div class="short-description">
                                    @Html.Raw(Model.ShortDescription)
                                </div>
                            }

                            <!--attributes-->
                            @{
                                var dataDictAttributes = new ViewDataDictionary();
                                dataDictAttributes.TemplateInfo.HtmlFieldPrefix = string.Format("attributes_{0}", Model.Id);
                                @Html.Partial("_ProductAttributes", Model.ProductAttributes, dataDictAttributes)
                            }
                            <!--gift card-->
                            @{
                                var dataDictGiftCard = new ViewDataDictionary();
                                dataDictGiftCard.TemplateInfo.HtmlFieldPrefix = string.Format("giftcard_{0}", Model.Id);
                                @Html.Partial("_GiftCardInfo", Model.GiftCard, dataDictGiftCard)
                            }
                            <!--rental info-->
                            @{
                                var dataDictRental = new ViewDataDictionary();
                                dataDictRental.TemplateInfo.HtmlFieldPrefix = string.Format("rental_{0}", Model.Id);
                                @Html.Partial("_RentalInfo", Model, dataDictRental)
                            }
                            @if (!Model.ProductPrice.CallForPrice && !Model.AddToCart.CustomerEntersPrice)
                            {
                                // Added by Nop-Templates.com
                                ViewBag.HideTierPrice = Model.HideTierPrice;

                                @Html.Partial("_ProductTierPrices", Model.TierPrices)
                            }
                            <div class="add-to-cart-buttons-wrapper">
                                <div class="prices-stock-wrapper">
                                    <!--price-->
                                    @{
                                        var dataDictPrice = new ViewDataDictionary();
                                        dataDictPrice.TemplateInfo.HtmlFieldPrefix = string.Format("price_{0}", Model.Id);
                                        @Html.Partial("_ProductPrice", Model.ProductPrice, dataDictPrice)
                                    }
                                    <!--availability-->
                                    @Html.Partial("_Availability", Model)
                                </div>
                                <!--add to cart-->
                                @{
                                    var dataDictAddToCart = new ViewDataDictionary();
                                    dataDictAddToCart.TemplateInfo.HtmlFieldPrefix = string.Format("addtocart_{0}", Model.Id);
                                    @Html.Partial("_AddToCart", Model.AddToCart, dataDictAddToCart)
                                }
                                <!--wishlist, compare, email a friend-->
                                <div class="overview-buttons">
                                    <div class="inner-wrapper">
                                        @Html.Widget("productdetails_inside_overview_buttons_before", Model.Id)
                                        @{
                                            var dataDictAddToWishlist = new ViewDataDictionary();
                                            dataDictAddToWishlist.TemplateInfo.HtmlFieldPrefix = string.Format("addtocart_{0}", Model.Id);
                                            @Html.Partial("_AddToWishlist", Model.AddToCart, dataDictAddToWishlist)
                                        }
                                        @Html.Partial("_CompareProductsButton", Model)
                                        @Html.Partial("_ProductEmailAFriendButton", Model)
                                        @Html.Widget("productdetails_inside_overview_buttons_after", Model.Id)

                                        <!--sample download-->
                                        @Html.Partial("_DownloadSample", Model)
                                    </div>
                                </div>
                            </div>

                            @if (showShareButton)
                            {
                                @Html.Partial("_ShareButton", Model.SeName)
                            }

                            @Html.Widget("productdetails_overview_bottom", Model.Id)

                        </div>
                        @if (!String.IsNullOrEmpty(Model.FullDescription))
                        {
                            <div class="full-description" itemprop="description">
                                @Html.Raw(Model.FullDescription)
                            </div>
                        }
                    </div>
                    @Html.Widget("productdetails_before_collateral", Model.Id)
                    <div class="product-collateral">
                        @Html.Partial("_ProductSpecifications", Model.ProductSpecifications)
                        @Html.Partial("_ProductTags", Model.ProductTags)
                    </div>
                    @Html.Action("ProductsAlsoPurchased", "Product", new { productId = Model.Id })
                </div>
                @Html.Action("RelatedProducts", "Product", new { productId = Model.Id })
            </div>

        }
        @Html.Widget("productdetails_bottom", Model.Id)
    </div>
</div>

<script type="text/javascript">
    $(document).ready(function () {

        $(document).on('product_attributes_changed', function() {

            $.ajax({
                cache: false,
                url: '@Html.Raw(Url.Action("GetImagePreview", "ColorConfigurator", new { productId = Model.Id }))',
                data: $('.has-color-configuration#product-details-form [id^=product_attribute_input_] select:visible').serialize(),
                type: 'post',
                success: function(data) {
                    if (data && data.length > 0) {

                        $('#main-product-img-@Model.Id').attr("src", data);

                        if ($('#main-product-img-lightbox-anchor-@Model.Id').length) {

                            $('#main-product-img-lightbox-anchor-@Model.Id').attr("href", data);
                        }
                    }
                }
            });
        });

        $('.thumb-popup-link').wrapAll('<div class="picture-thumbs-list" id="picture-thumbs-carousel" />');
        $('.thumb-popup-link').wrap('<div class="picture-thumbs-item"></div>');

        $('.thumb-popup-link').addClass('cloudzoom-gallery');
        $('.thumb-popup-link img').addClass('cloud-zoom-gallery-img');

        var responsiveBreakpointsObj = {};

        try {

            responsiveBreakpointsObj = JSON.parse('@Html.Raw(responsiveBreakpointsForThumbnails)');
        }
        catch (e) {
            console.log('Invalid carousel breakpoints setting value!');
        }

        $('#picture-thumbs-carousel').slick({
            rtl: false,
            infinite: true,
            vertical: false,
            slidesToShow: @numberOfPictureThumbnailsInCarousel,
            slidesToScroll: @numberOfPictureThumbnailsInCarousel,
            easing: "swing",
            draggable: false,
            responsive: responsiveBreakpointsObj
        });
    });
</script>