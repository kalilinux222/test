@using Nop.Core.Domain.Catalog
@using Nop.Admin.Models.Catalog
@using Nop.Core.Infrastructure
@using SevenSpikes.Nop.Framework;

@model ProductListModel
@{
	Layout = AdminViewLocations.AdminLayoutViewPath;

	var defaultGridPageSize = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>().DefaultGridPageSize;
	var gridPageSizes = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>().GridPageSizes;

	//page title
	ViewBag.Title = T("SevenSpikes.FurnitureLeisure.Admin.ProductTagsImport.Title").Text;
}
@using (Html.BeginForm())
{
	@Html.AntiForgeryToken()
	<div class="section-header">
		<div class="title">
			<img src="@Url.Content("~/Administration/Content/images/ico-catalog.png")" alt="" />
			@T("SevenSpikes.FurnitureLeisure.Admin.ProductTagsImport.Title")
		</div>
		<div class="options">   
			<input type="submit" name="exportcsv-all" class="k-button" value="@T("SevenSpikes.FurnitureLeisure.Admin.ProductTagsImport.ExportToCsvAll")" />
			<input type="button" id="exportcsv-selected" class="k-button" value="@T("SevenSpikes.FurnitureLeisure.Admin.ProductTagsImport.ExportToCsvSelected")" />
			@if (!Model.IsLoggedInAsVendor)
			{
				//a vendor cannot import products
				<input type="button" id="importcsv" name="importcsv" class="k-button" value="@T("SevenSpikes.FurnitureLeisure.Admin.ProductTagsImport.ImportCsv")" />
			}
		</div>
	</div>
	<table width="100%">
		<tr>
			<td class="adminTitle">
				@Html.NopLabelFor(model => model.SearchProductName):
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.SearchProductName)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.NopLabelFor(model => model.SearchCategoryId):
			</td>
			<td class="adminData">
				@Html.DropDownList("SearchCategoryId", Model.AvailableCategories)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.NopLabelFor(model => model.SearchIncludeSubCategories):
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.SearchIncludeSubCategories)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.NopLabelFor(model => model.SearchManufacturerId):
			</td>
			<td class="adminData">
				@Html.DropDownList("SearchManufacturerId", Model.AvailableManufacturers)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.NopLabelFor(model => model.SearchStoreId):
			</td>
			<td class="adminData">
				@Html.DropDownList("SearchStoreId", Model.AvailableStores)
			</td>
		</tr>
		<tr @(Model.IsLoggedInAsVendor ? Html.Raw("style='display: none;'") : null)>
			<td class="adminTitle">
				@Html.NopLabelFor(model => model.SearchVendorId):
			</td>
			<td class="adminData">
				@Html.DropDownList("SearchVendorId", Model.AvailableVendors)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.NopLabelFor(model => model.SearchWarehouseId):
			</td>
			<td class="adminData">
				@Html.DropDownList("SearchWarehouseId", Model.AvailableWarehouses)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.NopLabelFor(model => model.SearchProductTypeId):
			</td>
			<td class="adminData">
				@Html.DropDownList("SearchProductTypeId", Model.AvailableProductTypes)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.NopLabelFor(model => model.SearchPublishedId):
			</td>
			<td class="adminData">
				@Html.DropDownList("SearchPublishedId", Model.AvailablePublishedOptions)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.NopLabelFor(model => model.GoDirectlyToSku):
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.GoDirectlyToSku)
				<input type="submit" id="go-to-product-by-sku" name="go-to-product-by-sku" class="k-button" value="@T("Admin.Common.Go")" />
			</td>
		</tr>
		<tr>
			<td colspan="2">
				<input type="button" id="search-products" class="k-button" value="@T("Admin.Common.Search")" />
			</td>
		</tr>
	</table>
	<table class="adminContent">
		<tr>
			<td>
				<div id="products-grid"></div>

				<script>
                    $(document).ready(function() {
                        $("#products-grid").kendoGrid({
                            dataSource: {
                                type: "json",
                                transport: {
                                    read: {
                                        url: "@Html.Raw(Url.Action("ProductList", "Product"))",
                                        type: "POST",
                                        dataType: "json",
                                        data: additionalData
                                    }
                                },
                                schema: {
                                    data: "Data",
                                    total: "Total",
                                    errors: "Errors"
                                },
                                error: function(e) {
                                    display_kendoui_grid_error(e);
                                    // Cancel the changes
                                    this.cancelChanges();
                                },
                                pageSize: @(defaultGridPageSize),
                                serverPaging: true,
                                serverFiltering: true,
                                serverSorting: true
                            },
                            pageable: {
                                refresh: true,
                                pageSizes: [@(gridPageSizes)]
                            },
                            editable: {
                                confirmation: false,
                                mode: "inline"
                            },
                            scrollable: false,
                            dataBound: onDataBound,
                            columns: [
                                {
                                    field: "Id",
                                    headerTemplate: "<input id='mastercheckbox' type='checkbox'/>",
                                    headerAttributes: { style: "text-align:center" },
                                    attributes: { style: "text-align:center" },
                                    template: "<input type='checkbox' value='#=Id#' class='checkboxGroups'/>",
                                    width: 50
                                },
                                {
                                    field: "PictureThumbnailUrl",
                                    title: "@T("Admin.Catalog.Products.Fields.PictureThumbnailUrl")",
                                    template: '<img src="#=PictureThumbnailUrl#" />',
                                    width: 100
                                },
                                {
                                    field: "Name",
                                    title: "@T("Admin.Catalog.Products.Fields.Name")",
                                    width: 300
                                }, {
                                    field: "Sku",
                                    title: "@T("Admin.Catalog.Products.Fields.Sku")",
                                    width: 100
                                }, {
                                    field: "Price",
                                    title: "@T("Admin.Catalog.Products.Fields.Price")",
                                    width: 150,
                                    //if not a grouped product, then display
                                    template: "# if(ProductTypeId != @((int)ProductType.GroupedProduct)) {# #:Price# #}  #"
                                }, {
                                    field: "Id",
                                    title: "@T("Admin.Catalog.Products.Fields.ProductTemplate")",
                                    width: 100,
                                    template: '#=CustomProperties["TemplateName"] ? CustomProperties["TemplateName"] : "[error]"#'
                                }, {
                                    field: "ProductTypeName",
                                    title: "@T("Admin.Catalog.Products.Fields.ProductType")",
                                    width: 100
                                }, {
                                    field: "Published",
                                    title: "@T("Admin.Catalog.Products.Fields.Published")",
                                    width: 100,
                                    headerAttributes: { style: "text-align:center" },
                                    attributes: { style: "text-align:center" },
                                    template: '<img src="@Url.Content("~/Administration/Content/images/")active-#=Published#.gif" />'
                                }
                            ]
                        } );
                    });
				</script>
			</td>
		</tr>
	</table>

	<script type="text/javascript">

        var selectedIds = [];

        $(document).ready(function () {

            //search button
            $('#search-products').click(function () {
                //search
                var grid = $('#products-grid').data('kendoGrid');
                grid.dataSource.page(1); //new search. Set page size to 1
                //grid.dataSource.read(); we already loaded the grid above using "page" function
                //clear selected checkboxes
                $('.checkboxGroups').attr('checked', false).change();
                selectedIds = [];
                return false;
            });

            $("#@Html.FieldIdFor(model => model.SearchProductName)").keydown(function (event) {
                if (event.keyCode == 13) {
                    $("#search-products").click();
                    return false;
                }
            });
            $("#@Html.FieldIdFor(model => model.GoDirectlyToSku)").keydown(function (event) {
                if (event.keyCode == 13) {
                    $("#go-to-product-by-sku").click();
                    return false;
                }
            });

            //delete selected
            $('#delete-selected').click(function(e) {

                e.preventDefault();

                var postData = {
                    selectedIds: selectedIds
                };
                addAntiForgeryToken(postData);

                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("DeleteSelected", "Product"))",
                    data: postData,
                    complete: function(data) {
                        //reload grid
                        var grid = $('#products-grid').data('kendoGrid');
                        grid.dataSource.read();
                    },
                    error: function(xhr, ajaxOptions, thrownError) {
                        alert(thrownError);
                    },
                    traditional: true
                });
                return false;
            });

            $('#mastercheckbox').click(function () {
                $('.checkboxGroups').attr('checked', $(this).is(':checked')).change();
            });

            //wire up checkboxes.
            $('#products-grid').on('change', 'input[type=checkbox][id!=mastercheckbox]', function (e) {
                var $check = $(this);
                if ($check.is(":checked") == true) {
                    var checked = jQuery.inArray($check.val(), selectedIds);
                    if (checked == -1) {
                        //add id to selectedIds.
                        selectedIds.push($check.val());
                    }
                }
                else {
                    var checked = jQuery.inArray($check.val(), selectedIds);
                    if (checked > -1) {
                        //remove id from selectedIds.
                        selectedIds = $.grep(selectedIds, function (item, index) {
                            return item != $check.val();
                        });
                    }
                }
                updateMasterCheckbox();
            });
        });

        function additionalData() {
            var data = {
                SearchProductName: $('#@Html.FieldIdFor(model => model.SearchProductName)').val(),
                SearchCategoryId: $('#SearchCategoryId').val(),
                SearchIncludeSubCategories: $('#@Html.FieldIdFor(model => model.SearchIncludeSubCategories)').is(':checked'),
                SearchManufacturerId: $('#SearchManufacturerId').val(),
                SearchStoreId: $('#SearchStoreId').val(),
                SearchWarehouseId: $('#SearchWarehouseId').val(),
                SearchVendorId: $('#SearchVendorId').val(),
                SearchProductTypeId: $('#SearchProductTypeId').val(),
                SearchPublishedId: $('#SearchPublishedId').val()
            };
            addAntiForgeryToken(data);
            return data;
        }

        function onDataBound(e) {
            $('#products-grid input[type=checkbox][id!=mastercheckbox]').each(function () {
                var currentId = $(this).val();
                var checked = jQuery.inArray(currentId, selectedIds);
                //set checked based on if current checkbox's value is in selectedIds.
                $(this).attr('checked', checked > -1);
            });

            updateMasterCheckbox();
        }

        function updateMasterCheckbox() {
            var numChkBoxes = $('#products-grid input[type=checkbox][id!=mastercheckbox]').length;
            var numChkBoxesChecked = $('#products-grid input[type=checkbox][id!=mastercheckbox]:checked').length;
            $('#mastercheckbox').attr('checked', numChkBoxes == numChkBoxesChecked && numChkBoxes > 0);
        }
	</script>

}


@*import products form*@
<div id="importcsv-window" style="display:none;">
	@using (Html.BeginForm("ImportCsv", "FurnitureLeisureProductTagsImport", FormMethod.Post, new { enctype = "multipart/form-data" }))
	{
		@Html.AntiForgeryToken()
		<table style="text-align:left;">
			<tr>
				<td colspan="2">
					<em>@T("SevenSpikes.FurnitureLeisure.Admin.ProductTagsImport.ImportCsvTip")</em>
				</td>
			</tr>
			<tr>
				<td>
					@T("SevenSpikes.FurnitureLeisure.Admin.ProductTagsImport.ImportFile"):
				</td>
				<td>
					<input type="file" id="importcsvfile" name="importcsvfile" />
				</td>
			</tr>
			<tr>
				<td colspan="2">
					<input type="submit" class="k-button" value="@T("SevenSpikes.FurnitureLeisure.Admin.ProductTagsImport.ImportFromCsv")" />
				</td>
			</tr>
		</table>
	}
</div>
<script type="text/javascript">
    $(document).ready(function () {
        $("#importcsv").click(function (e) {
            e.preventDefault();
            var window = $("#importcsv-window");
            if (!window.data("kendoWindow")) {
                window.kendoWindow({
                    modal: true,
                    width: "400px",
                    title: "@T("SevenSpikes.FurnitureLeisure.Admin.ProductTagsImport.ImportCsvTitle")",
                    actions: ["Close"]
                });
            }
            window.data('kendoWindow').center().open();
        });
    });
</script>

@*export selected (XML). We don't use GET approach because it's limited to 2K-4K chars and won't work for large number of entities*@
@using (Html.BeginForm("ExportCsvSelected", "FurnitureLeisureProductTagsImport", FormMethod.Post, new { id = "export-csv-selected-form" }))
{
	@Html.AntiForgeryToken()
	<input type="hidden" id="selectedIds" name="selectedIds" value="" />
}
<script type="text/javascript">

	$(document).ready(function ()
	{
		$('#exportcsv-selected').click(function (e)
		{
			e.preventDefault();
			var ids = selectedIds.join(",");
			$('#export-csv-selected-form #selectedIds').val(ids);
			$('#export-csv-selected-form').submit();
			return false;
		});
	});

</script>
