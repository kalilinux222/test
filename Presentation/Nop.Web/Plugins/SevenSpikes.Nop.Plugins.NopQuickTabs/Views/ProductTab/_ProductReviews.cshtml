@** Copyright 2016 Seven Spikes Ltd. All rights reserved. (http://www.nop-templates.com)
    * http://www.nop-templates.com/t/licensinginfo
*@

@model Nop.Web.Models.Catalog.ProductReviewsModel
<div id="updateTargetId" class="product-reviews-page">
    @if (Model.Items.Count > 0)
    {
        <div class="product-review-list">
            <div class="title">
                <strong>@T("Reviews.ExistingReviews")</strong>
            </div>
            @foreach (var review in Model.Items)
            {
                int ratingPercent = review.Rating * 20;

                <div class="product-review-item">
                    <div class="review-item-head">
                        <div class="review-title">
                            <strong>@review.Title</strong>
                        </div>
                        <div class="product-review-box">
                            <div class="rating">
                                <div style="width: @(ratingPercent)%">
                                </div>
                            </div>

                        </div>
                    </div>
                    <div class="review-text">
                        @Html.Raw(Nop.Core.Html.HtmlHelper.FormatText(review.ReviewText, false, true, false, false, false, false))
                    </div>
                    <div class="review-info">
                        <span class="user">
                            <strong>@T("Reviews.From"):</strong>
                            @{
                                var name = review.Name;

                                if(!string.IsNullOrEmpty(name) && name.Split(' ').Length > 1)
                                {
                                    var splitted = name.Split(' ');

                                    var firstName = splitted[0];
                                    var lastName = splitted[1];
                                    name = firstName + ' ' + lastName.ToCharArray()[0] + '.';
                                }
                            }
                            @name
                        </span>

                        @if(!string.IsNullOrEmpty(review.BusinessName))
                        {
                            <span class="separator">|</span>
                            <span class="business">
                                <strong>@T("Reviews.Business"):</strong>
                                @review.BusinessName
                            </span>
                        }

                        <span class="separator">|</span>
                        <span class="date">
                            <strong>@T("Reviews.Date"):</strong>
                            @review.WrittenOnStr
                        </span>
                    </div>
                    @Html.Partial("_ProductReviewHelpfulness", review.Helpfulness, new ViewDataDictionary())
                    @Html.Widget("productreviews_page_inside_review")
                </div>
            }
        </div>
        
        <div class="show-reviews">
            <button class="show-reviews-button" type="button">Show more reviews</button>
        </div>
        
        <script type="text/javascript">
            $(document).ready(function () {
                if ($('.product-review-item').length > 3) {
                    var targetElements = $('.product-review-item:gt(2)');
                    targetElements.hide();
                    $('.show-reviews-button').on('click', function () {
                        targetElements.show();
                        $('.show-reviews').hide();
                    });
                }
                else {
                    $('.show-reviews').hide();
                }
            });
        </script>
    }
    @if (Model.AddProductReview.SuccessfullyAdded)
    {
        <div class="submitReviewResult">
            @Model.AddProductReview.Result
        </div>
    }
    else
    {
        <div class="write-review" id="review-form">
            <div class="title">
                <strong>@T("Reviews.Write")</strong>
            </div>
            <div class="message-error">@Html.ValidationSummary(true)</div>
            <div class="form-fields">
                <div class="inputs user-name">
                    @Html.LabelFor(model => model.AddProductReview.Name, new { }, ":")
                    @Html.TextBoxFor(model => model.AddProductReview.Name, Model.AddProductReview.CanCurrentCustomerLeaveReview ? (object)(new { @class = "review-name" }) : (object)(new { @class = "review-name", disabled = "disabled" }))
                    @Html.ValidationMessageFor(model => model.AddProductReview.Name)
                </div>
                <div class="inputs business-name">
                    @Html.LabelFor(model => model.AddProductReview.BusinessName, new { }, ":")
                    @Html.TextBoxFor(model => model.AddProductReview.BusinessName, Model.AddProductReview.CanCurrentCustomerLeaveReview ? (object)(new { @class = "review-business-name" }) : (object)(new { @class = "review-business-name", disabled = "disabled" }))
                    @Html.ValidationMessageFor(model => model.AddProductReview.BusinessName)
                </div>
                <div class="inputs">
                    @Html.LabelFor(model => model.AddProductReview.Title, new { }, ":")
                    @Html.TextBoxFor(model => model.AddProductReview.Title, Model.AddProductReview.CanCurrentCustomerLeaveReview ? (object)(new { @class = "review-title" }) : (object)(new { @class = "review-title", disabled = "disabled" }))
                    @Html.ValidationMessageFor(model => model.AddProductReview.Title)
                </div>
                <div class="inputs">
                    @Html.LabelFor(model => model.AddProductReview.ReviewText, new { }, ":")
                    @Html.TextAreaFor(model => model.AddProductReview.ReviewText, Model.AddProductReview.CanCurrentCustomerLeaveReview ? (object)(new { @class = "review-text" }) : (object)(new { @class = "review-text", disabled = "disabled" }))
                    @Html.ValidationMessageFor(model => model.AddProductReview.ReviewText)
                </div>
                <div class="review-rating">
                    @Html.LabelFor(model => model.AddProductReview.Rating, new { }, ":")
                    <ul>
                        <li class="first">@T("Reviews.Fields.Rating.Bad")</li>
                        <li class="rating">
                            @Html.RadioButtonFor(model => model.AddProductReview.Rating, "1", new { id = "addproductrating_1" })
                            <label class="vote-star" for="addproductrating_1">@T("Reviews.Fields.Rating") 1</label>
                            @Html.RadioButtonFor(model => model.AddProductReview.Rating, "2", new { id = "addproductrating_2" })
                            <label class="vote-star" for="addproductrating_2">@T("Reviews.Fields.Rating") 2</label>
                            @Html.RadioButtonFor(model => model.AddProductReview.Rating, "3", new { id = "addproductrating_3" })
                            <label class="vote-star" for="addproductrating_3">@T("Reviews.Fields.Rating") 3</label>
                            @Html.RadioButtonFor(model => model.AddProductReview.Rating, "4", new { id = "addproductrating_4" })
                            <label class="vote-star" for="addproductrating_4">@T("Reviews.Fields.Rating") 4</label>
                            @Html.RadioButtonFor(model => model.AddProductReview.Rating, "5", new { id = "addproductrating_5" })
                            <label class="vote-star" for="addproductrating_5">@T("Reviews.Fields.Rating") 5</label>
                        </li>
                        <li class="last">@T("Reviews.Fields.Rating.Excellent")</li>
                    </ul>
                </div>
                @*@if (Model.AddProductReview.DisplayCaptcha)
                {
                <div class="captcha-box">
                    @Html.Raw(Html.GenerateCaptcha())
                </div>
                }*@
            </div>
            <div class="buttons">
                @if (Model.AddProductReview.CanCurrentCustomerLeaveReview)
                {
                    <input type="button" id="add-review" name="add-review" class="button-1 write-product-review-button" value="@T("Reviews.SubmitButton")" />
                }
                else
                {
                    <input type="button" id="add-review" disabled="disabled" name="add-review" class="button-1 write-product-review-button" value="@T("Reviews.SubmitButton")" />
                }
            </div>

        </div>
    }
</div>
