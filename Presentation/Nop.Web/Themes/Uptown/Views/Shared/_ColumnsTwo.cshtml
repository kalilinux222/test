@using Nop.Core
@using Nop.Core.Infrastructure
@using Nop.Services.Configuration

@{
    Layout = "~/Views/Shared/_Root.cshtml";

    var currentController = Url.RequestContext.RouteData.Values["controller"].ToString();
    var currentAction = Url.RequestContext.RouteData.Values["action"].ToString();

    //current category ID
    int currentCategoryId = 0;
    if (currentController.Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
        currentAction.Equals("category", StringComparison.InvariantCultureIgnoreCase))
    {
        currentCategoryId = Convert.ToInt32(Url.RequestContext.RouteData.Values["categoryId"].ToString());
    }


    //current manufacturer ID
    int currentManufacturerId = 0;
    if (currentController.Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
        currentAction.Equals("manufacturer", StringComparison.InvariantCultureIgnoreCase))
    {
        currentManufacturerId = Convert.ToInt32(Url.RequestContext.RouteData.Values["manufacturerId"].ToString());
    }

    //current product ID
    int currentProductId = 0;
    if (currentController.Equals("product", StringComparison.InvariantCultureIgnoreCase) &&
        currentAction.Equals("productdetails", StringComparison.InvariantCultureIgnoreCase))
    {
        currentProductId = Convert.ToInt32(Url.RequestContext.RouteData.Values["productId"].ToString());
    }

    var currentStoreId = EngineContext.Current.Resolve<IStoreContext>().CurrentStore.Id;

    var settingService = EngineContext.Current.Resolve<ISettingService>();

    var isOneColumn = settingService.GetSettingByKey("uptownthemesettings.iscategorypageonecolumn", false, currentStoreId, true);
    var categoryNavigationEnabled = settingService.GetSettingByKey("uptownthemesettings.isdefaultcategorynavigationenabled", false, currentStoreId, true);
    var manufacturerNavigationEnabled = settingService.GetSettingByKey("uptownthemesettings.isdefaultmanufacturernavigationenabled", false, currentStoreId, true);
    var vendorNavigationEnabled = settingService.GetSettingByKey("uptownthemesettings.isdefaultvendornavigationenabled", false, currentStoreId, true);

    var isCustomerAccountPage = currentController.Equals("customer", StringComparison.InvariantCultureIgnoreCase);
    var isOrderListPage = currentController.Equals("order", StringComparison.InvariantCultureIgnoreCase) && currentAction.Equals("customerorders", StringComparison.InvariantCultureIgnoreCase);
    var isReturnRequest = currentController.Equals("returnrequest", StringComparison.InvariantCultureIgnoreCase) && currentAction.Equals("customerreturnrequests", StringComparison.InvariantCultureIgnoreCase);
    var isBackInStockSubscriptions = currentController.Equals("backinstocksubscription", StringComparison.InvariantCultureIgnoreCase) && currentAction.Equals("customersubscriptions", StringComparison.InvariantCultureIgnoreCase);
    var isRewardPoints = currentController.Equals("order", StringComparison.InvariantCultureIgnoreCase) && currentAction.Equals("customerrewardpoints", StringComparison.InvariantCultureIgnoreCase);
    var isForumSubscriptions = currentController.Equals("boards", StringComparison.InvariantCultureIgnoreCase) && currentAction.Equals("customerforumsubscriptions", StringComparison.InvariantCultureIgnoreCase); ;

    isCustomerAccountPage = isCustomerAccountPage || isOrderListPage || isReturnRequest || isBackInStockSubscriptions || isRewardPoints || isForumSubscriptions;
    
    if (isCustomerAccountPage ||
        currentController.Equals("order", StringComparison.InvariantCultureIgnoreCase) ||
        currentController.Equals("blog", StringComparison.InvariantCultureIgnoreCase) ||
        (currentController.Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
        currentAction.Equals("producttagsall", StringComparison.InvariantCultureIgnoreCase)) ||
        currentController.Equals("helpdesk", StringComparison.InvariantCultureIgnoreCase) ||
        currentController.Equals("richblogsearch", StringComparison.InvariantCultureIgnoreCase))
    {
        isOneColumn = false;
    }

}

@if (IsSectionDefined("Breadcrumb"))
{
    @section Breadcrumb {
        @RenderSection("Breadcrumb")
    }
}

@if (IsSectionDefined("CategoryDescription"))
{
    @RenderSection("CategoryDescription")
}

@if (IsSectionDefined("SubCategories"))
{
    @RenderSection("SubCategories")
}

@if (IsSectionDefined("AdvancedSearch"))
{
    @RenderSection("AdvancedSearch")
} 

@if (isOneColumn)
{
    <div class="center-1">

        @Html.Widget("main_column_before")
        
        @{
            var ajaxFiltersOneColumnWidget = Html.Widget("ajax_filters_when_one_column");
        }

        @if (!MvcHtmlString.IsNullOrEmpty(ajaxFiltersOneColumnWidget))
        {
            <div class="uptown-one-column-ajax-filters-wrapper">@ajaxFiltersOneColumnWidget</div>
        }

        @RenderBody()

        <div class="onecolumn-category-block-wrapper">

            @if (categoryNavigationEnabled)
            {
                @Html.Action("CategoryNavigation", "Catalog", new { currentCategoryId = currentCategoryId, currentProductId = currentProductId })
            }

            @if (manufacturerNavigationEnabled)
            {
                @Html.Action("ManufacturerNavigation", "Catalog", new { currentManufacturerId = currentManufacturerId })
            }

            @if (vendorNavigationEnabled)
            {
                @Html.Action("VendorNavigation", "Catalog")
            }
            
        </div>

        @Html.Action("PopularProductTags", "Catalog")

        @Html.Widget("main_column_after")
    </div>

}
else
{
    /* We need the side to be before center on customer pages, because of the styling */
    if (isCustomerAccountPage)
    {
        <div class="account-page-navigation">
            @if (IsSectionDefined("left"))
            {
                @RenderSection("left")
            }
        </div>
        <div class="center-1">
            @Html.Widget("main_column_before")
            @RenderBody()
            @Html.Widget("main_column_after")
        </div>
    }
    else
    {
        <div class="center-2">
            @Html.Widget("main_column_before")
            @RenderBody()
            @Html.Widget("main_column_after")
        </div>
        <div class="side-2">
            @if (IsSectionDefined("left"))
            {
                @RenderSection("left")
            }
            else
            {
                @Html.Widget("left_side_column_before")
                @Html.Action("CategoryNavigation", "Catalog", new {currentCategoryId = currentCategoryId, currentProductId = currentProductId})
                @Html.Widget("left_side_column_after_category_navigation")
                @Html.Action("ManufacturerNavigation", "Catalog", new {currentManufacturerId = currentManufacturerId})
                @Html.Action("VendorNavigation", "Catalog")
                @Html.Action("RecentlyViewedProductsBlock", "Product", new {productThumbPictureSize = 64})
                @Html.Action("PopularProductTags", "Catalog")
                @Html.Action("PollBlock", "Poll", new {systemKeyword = "LeftColumnPoll"})
                @Html.Widget("left_side_column_after")
            }
        </div>
    }
}

